#!/usr/bin/python3

# Andrew Song - 1204822
# Assignment 2
# CIS4010
# 02/11/23
import configparser
import boto3
from os import listdir
import sys
from tabulate import tabulate
from ddb_modules import *

user_name = ""


def init_aws_connection():
    config = configparser.ConfigParser()
    config.read("S5-S3.conf")
    aws_access_key_id = config['default']['aws_access_key_id']
    aws_secret_access_key = config['default']['aws_secret_access_key']
    aws_region = config['default']['region']

    #
    #  Establish an AWS session
    #
    session = boto3.Session(
        aws_access_key_id=aws_access_key_id,
        aws_secret_access_key=aws_secret_access_key,
        region_name=aws_region
    )
    global user_name
    user_name = session.client("sts").get_caller_identity()['UserId']
    #
    #  Set up resources
    #

    try:
        ddb = session.client('dynamodb')
        print("Connected to Dynamo DB")

    except:
        print("Could not connect to Dynamo DB")

    return ddb


def bulk_create_table(ddb):
    csv_list = [name for name in listdir(".") if name.endswith(".csv")]
    for file in csv_list:
        try:
            with open(file, mode="r", encoding="utf-8-sig") as csv:
                key = csv.readline().split(",", 1)[0]
                create_table(
                    ddb, f"{user_name}_{file.split('.', 1)[0]}", key)
        except Exception as err:
            print("Could not create table.", err)


def bulk_load(ddb):
    csv_list = [name for name in listdir(".") if name.endswith(".csv")]
    for file in csv_list:
        try:
            with open(file, mode="r", encoding="utf-8-sig") as csv:
                load_records(ddb, f"{user_name}_{file.split('.', 1)[0]}", csv)
        except Exception as err:
            print("Could not insert data into table.", err)

def generate_report_A(ddb, country_code):
    country = query_item(ddb, "AIDAZMTTOSN5ZFW36HJBM_un_shortlist", "ISO3", country_code)
    if(len(country) > 1):
        with open(f"Report A - {country['Item']['Country Name']['S']}.txt", "w", encoding="utf-8-sig") as sys.stdout:
            print(f"{country['Item']['Country Name']['S']}")
            print(F"[Official Name: {country['Item']['Official Name']['S']}]\n")

            area = query_item(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_area", "ISO3", country_code)
            area_table = dump(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_area").astype({"Area": int}).sort_values("Area", ascending=False).reset_index(drop=True)
            area_rank = area_table.loc[area_table["ISO3"] == country_code].index[0] + 1

            language = query_item(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_languages", "ISO3", country_code)
            capital = query_item(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_capitals", "ISO3", country_code)
            
            print(tabulate(pandas.DataFrame([f"Area: {area['Item']['Area']['S']} sq km ({area_rank})", f"Official/National Languages: {language['Item']['Languages']['S']}\nCapital City: {capital['Item']['Capital']['S']}"]), tablefmt="heavy_grid", showindex=False) + "\n")
            print("Population\n")

            population = query_item(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_curpop", "Country", country['Item']['Country Name']['S'])
            years = population['Item']
            years = {k.replace("Population ", ""): v for k, v in years.items()}
            population_table = []
            for year in years:
                if(year.isdigit()):
                    population_rank_table = dump(ddb, "AIDAZMTTOSN5ZFW36HJBM_shortlist_curpop").rename(columns=lambda x: x.replace("Population ", ""))
                    population_rank = population_rank_table.loc[population_rank_table["Country"] == country['Item']['Country Name']['S']].index[0] + 1
                    population_density_table = population_rank_table.copy(deep=True)
                    population_density_table["Population Density"] = (population_density_table[year] / area_table["Area"])
                    population_density_table = population_density_table.sort_values("Population Density", ascending=False).reset_index(drop=True)
                    population_density_rank = population_density_table.loc[population_density_table["Country"] == country['Item']['Country Name']['S']].index[0] + 1
                    if year.isdigit():
                        population_table.append([year, years[year]['S'], population_rank, int(years[year]['S']) / int(area['Item']['Area']['S']), population_density_rank])
            population_table = pandas.DataFrame(population_table).set_axis(["Year", "Population", "Rank", "Population Density (people/sq km)", "Rank"], axis=1).sort_values("Year")
            print(tabulate(population_table, headers="keys", tablefmt="heavy_grid", showindex=False))




def main():
    ddb = init_aws_connection()
    bulk_create_table(ddb)
    bulk_load(ddb)
    # delete_record(ddb, "AIDAZMTTOSN5ZFW36HJBM_un_shortlist", "ISO3", "ALB", "Country Name", "Albania")
    # data = dump(ddb, "AIDAZMTTOSN5ZFW36HJBM_un_shortlist")
    # print(tabulate(data, headers="keys", tablefmt="heavy_grid", showindex=False))
    generate_report_A(ddb, "CAN")
main()
